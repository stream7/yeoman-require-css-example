{
  "name": "require-css",
  "version": "0.0.1",
  "main": "css.js",
  "ignore": [
    "example",
    "test",
    ".gitignore"
  ],
  "gitHead": "9512e95cb05d1521e576dacd826eec6d3e20c96f",
  "readme": "require-css\n===========\n\nRequireJS CSS requiring and optimization.\n\nUseful for writing modular CSS dependencies alongside scripts. For an example of widget rendering see [ZestJS](http://zestjs.org).\n\nFor LESS inclusion, use [require-less](https://github.com/guybedford/require-less), which behaves and builds the css exactly like this module apart from the preprocessing step.\n\nOverview\n--------\n\nAllows the construction of scripts that can require CSS, using the simple RequireJS syntax:\n\n```javascript\ndefine(['css!styles/main'], function() {\n  //code that requires the stylesheet: styles/main.css\n});\n```\n\n### CSS Requiring\n* Fully compatible in IE 6 - 10, Chrome 3 - 26, Firefox 3.5 - 19, Opera 10 - 12, iOS, Android\n* Cross-domain style loading\n* Line numbers in dev inspector correlate with correct CSS file\n\n### CSS Building\n* **CSS builds** When run as part of a build with the RequireJS optimizer, `css!` dependencies are automatically inlined into the built layer within the JavaScript, fully compatible with layering. CSS injection is performed as soon as the layer is loaded.\n* **Option to build separate layer CSS files** A `separateCSS` build parameter allows for built layers to output their css files separately, instead of inline with the JavaScript, for manual inclusion.\n* **CSS compression** CSS redundancy compression is supported through the external library, [csso](https://github.com/css/csso).\n\nInstallation and Setup\n----------------------\n\nDownload the require-css folder manually or use [volo](https://github.com/volojs/volo)(`npm install volo -g`):\n\n```bash\nvolo add guybedford/require-css\n```\n\nTo allow the direct `css!` usage, add the following [map configuration](http://requirejs.org/docs/api.html#config-map) in RequireJS:\n\n```javascript\nmap: {\n  '*': {\n    'css': 'require-css/css' // or whatever the path to require-css is\n  }\n}\n```\n\nUse Cases and Benefits\n----------------------\n\n### Motivation\n\nThe use case for RequireCSS came out of a need to manage templates and their CSS together. \nThe idea being that a CSS require can be a dependency of the code that dynamically renders a template. \nWhen writing a large dynamic application, with templates being rendered on the client-side, it can be beneficial to inject the CSS as templates are required instead \nof dumping all the CSS together separately. The added benefit of this is then being able to build the CSS naturally with the RequireJS optimizer, \nwhich also supports [separate build layers](http://requirejs.org/docs/1.0/docs/faq-optimization.html#priority) as needed.\n\n### Script-inlined CSS Benefits\n\nBy default, during the build CSS is compressed and inlined as a string within the layer that injects the CSS when run.\n\nIf the layer is included as a `<script>` tag, only one browser request is needed instead of many separate CSS requests with `<link>` tags.\n\nEven better than including a layer as a `<script>` tag is to include the layer dynamically with a non-blocking require. \nThen the page can be displayed while the layer is still loading asynchronously in the background. \nIn this case, the CSS that goes with a template being dynamically rendered is loaded with that same script asynchronously. \nNo longer does it need to sit in a `<link>` tag that blocks the page display unnecessarily.\n\nModular CSS\n-----------\n\nRequireCSS implies a CSS modularisation where styles can be scoped directly to the render code that they are bundled with.\n\nJust like JS requires, the order of CSS injection can't be guaranteed. The idea here is that whenever there are style overrides, they should\nbe based on using a more specific selector with an extra id or class at the base, and not assuming a CSS load order. Reset and global styles are a repeated dependency of all \nmodular styles that build on top of them.\n\nOptimizer Configuration\n-----------------------\n\n### Basic Usage\n\nOptimizer configuration:\n\n```javascript\n{\n  modules: [\n  {\n    name: 'mymodule'\n  }\n  ]\n}\n```\n\nIf the contents of 'mymodule' are:\n\n```javascript\n  define(['css!style', 'css!page'], function(css) {\n    //...\n  });\n```\n\nThen the optimizer output would be:\n\n-mymodule.js containing:\n style.css and page.css which will be dynamically injected\n\n### Separate File Output\n\nTo output the CSS to a separate file, use the configuration:\n\n```javascript\n{\n  separateCSS: true,\n  modules: [\n  {\n    name: 'mymodule'\n  }\n  ]\n}\n```\n\nThis will then output all the css to the file `mymodule.css`. This configuration can also be placed on the module object itself for layer-specific settings.\n\nOptimization is fully compatible with exclude and include.\n\n**Note: Optimization will only work when using r.js version 2.1.0 or later (released Oct 4 2012)**\n\n\nCSS Compression\n---------------\n\nCSS compression is supported with [csso](https://github.com/css/csso).\n\nTo enable the CSS compression, install csso with npm:\n\n```\n  npm install csso -g\n```\n\nThe build log will display the compression results.\n\nWhen running the r.js optimizer through NodeJS, sometimes the global module isn't found. In this case install csso as a local node module so it can be found.\n\n\nConditional CSS\n---\n\nSome styles are conditional on the environment. For example mobile stylesheets and IE-specific stylesheets.\n\nTo manage this, use the [Require-IS](https://github.com/guybedford/require-is) module. \n\nWith Require-IS, one can do:\n\n```javascript\nrequire(['is!mobile?css!mobile-css'], function(css) {\n  //...\n});\n```\n\nMobile detection can be defined through a detection script in Require-IS, such as:\n\nmobile.js:\n```javascript\ndefine(function() {\n  return navigator.userAgent.match(/iPhone/); //(just iphone detection as an example)\n});\n```\n\nSeparate build layers can then be made for mobile specific use. Read more at the [Require-IS](https://github.com/guybedford/require-is) project page.\n\nInjection methods\n-----------------\n\n* When loading a CSS file or external CSS file, a `<link>` tag is used. Cross-browser support comes through a number of careful browser conditions for this.\n* When using Require-LESS parsing or when injecting CSS from the built `<script>` tag, a CSS `<style>` injection is used.\n\nIf CSS resources such as images are important to be loaded first, these can be added to the require through a loader plugin that can act as a preloader such as [image](https://github.com/millermedeiros/requirejs-plugins) or [font](https://github.com/millermedeiros/requirejs-plugins). Then a require can be written of the form:\n\n```javascript\nrequire(['css!my-css', 'image!preload-background-image.jpg', 'font!google,families:[Tangerine]']);\n```\n\nRoadmap\n-------\n* ~~Comprehensive CSS minification including style reduction~~\n* ~~LESS extension~~\n* Sprite compilation\n* Source maps?\n\nSuggestions always appreciated - feel free to post a feature request.\n",
  "readmeFilename": "README.md",
  "_id": "css@0.0.1",
  "description": "require-css ===========",
  "repository": {
    "type": "git",
    "url": "git://github.com/guybedford/require-css.git"
  }
}